package auth

import (
	"auth/models"
	"auth/utils"
	"time"

	"auth/utils/errors"
	"auth/utils/tokens"

	"codeberg.org/coldwire/cwhydra"
	"github.com/alexedwards/argon2id"
	"github.com/gofiber/fiber/v2"
)

func Register(c *fiber.Ctx) error {
	challenge := c.Query("login_challenge") // get challenge generated by hydra

	request := struct {
		Username   string `json:"username"`
		Password   string `json:"password"`
		PrivateKey string `json:"private_key"`
		PublicKey  string `json:"public_key"`
	}{}

	err := c.BodyParser(&request)
	if err != nil {
		return errors.Handle(c, errors.ErrBody, err)
	}

	user := models.User{
		Name: request.Username,
	}

	// Verify that the username is not empty or too short
	if request.Username == "" {
		return errors.Handle(c, errors.ErrBody)
	}

	// Verify if the user already exist
	exist := user.Exist()
	if exist {
		return errors.Handle(c, errors.ErrAuthExist)
	}

	// Hash password with argon2id
	hash, err := argon2id.CreateHash(request.Password, argon2id.DefaultParams)
	if err != nil {
		return errors.Handle(c, errors.ErrUnknown, err)
	}

	// If this is the first user to register, makes them admin
	isFirstUser := user.IsFirstOne()

	if isFirstUser {
		user.Group = "admin"
	} else {
		user.Group = "user"
	}

	// Set user data
	user.Password = hash
	user.PrivateKey = request.PrivateKey
	user.PublicKey = request.PublicKey

	err = user.Create()
	if err != nil {
		return errors.Handle(c, errors.ErrDatabaseCreate, err)
	}

	usrData := tokens.Token{
		Username:   user.Name,
		Group:      user.Group,
		PrivateKey: user.PrivateKey,
		PublicKey:  user.PublicKey,
	}

	cookie := tokens.Generate(usrData, 24*time.Hour)

	utils.SetCookie(c, "token", cookie, time.Now())

	if challenge == "" {
		return errors.Handle(c, errors.Success, usrData)
	} else {
		redirect, err := cwhydra.LoginManager(*cwhydra.AdminApi).Accept(challenge, cwhydra.AcceptLoginRequest{
			Subject: request.Username,
			Context: map[string]interface{}{
				"username":    request.Username,
				"role":        user.Group,
				"private_key": user.PrivateKey,
				"public_key":  user.PublicKey,
			},
			Remember: true,
		})
		if err != nil {
			return errors.Handle(c, errors.ErrUnknown, err)
		}

		return errors.Handle(c, errors.Success, fiber.Map{
			"redirect_url": redirect,
		})
	}
}
